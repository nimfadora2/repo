//          P O L E   M I N O W E
//           WERSJA PROCEDURALNA
//--------------------------------------------
// (C)2004 mgr Jerzy Wa≥aszrnowie

program PoleMinowe;

uses Crt;

//----------------------------------------------------
// PROCEDURY I FUNKCJE POMOCNICZE
//----------------------------------------------------

// Funkcja PL konwertuje tekst ze standardu Windows 1250
// na standard konsoli znakowej Latin II
//------------------------------------------------------
function PL(s : string) : string;
var
  i : integer;
  c : char;
begin
  for i := 1 to length(s) do
  begin
   case s[i] of
      'π' : c := #165;
      'Ê' : c := #134;
      'Í' : c := #169;
      '≥' : c := #136;
      'Ò' : c := #228;
      'Û' : c := #162;
      'ú' : c := #152;
      'ø' : c := #190;
      'ü' : c := #171;
      '•' : c := #164;
      '∆' : c := #143;
      ' ' : c := #168;
      '£' : c := #157;
      '—' : c := #227;
      '”' : c := #224;
      'å' : c := #151;
      'Ø' : c := #189;
      'è' : c := #141;
      else
        c := s[i]; 
    end;
    s[i] := c;
  end;
  Result := s;
end;

// Procedura centruje w bieøπcym wierszu
// tekst podany jako parametr
//----------------------------------------------------
procedure Centruj(t : string);
begin
  GotoXY(1 + (80-length(t)) div 2, WhereY);
  writeln(t);
end;

// Procedura rysuje pojedynczπ ramkÍ ze znakÛw
// tabelek. Parametry okreúlajπ wspÛ≥rzÍdne
// lewego gÛrnego i prawego dolnego naroønika
//----------------------------------------------------
procedure Ramka(xp,yp,xk,yk : integer);
var
  i : integer;
begin
  GotoXY(xp,yp); write(#218);
  GotoXY(xp,yk); write(#192);
  GotoXY(xk,yp); write(#191);
  GotoXY(xk,yk); write(#217);
  for i := xp + 1 to xk - 1 do
  begin
    GotoXY(i,yp); write(#196);
    GotoXY(i,yk); write(#196);
  end;
  for i := yp + 1 to yk - 1 do
  begin
    GotoXY(xp,i); write(#179);
    GotoXY(xk,i); write(#179);
  end;
end;

//------------------------------------------------------
// PROGRAM GRY
//------------------------------------------------------

const
  PM_MAX_Y = 19; // okreúla wysokoúÊ pola minowego
  PM_MAX_X = 77; // okreúla szerokoúÊ pola minowego

var
  pm : array[0..PM_MAX_Y,0..PM_MAX_X] of char;

// Procedura wyúwietla stronÍ tytu≥owπ, czeka na dowolny
// klawisz i czyúci ekran
//------------------------------------------------------
procedure StronaTytulowa;
begin
  TextAttr := $07; ClrScr;
  GotoXY(1,4);
  TextAttr := $4e;
  Centruj(PL('                                  '));
  Centruj(PL('  GRA DLA SAPER”W---------------  '));
  Centruj(PL('  -------------------POLE MINOWE  '));
  Centruj(PL('                                  '));
  TextAttr := $1f;
  Centruj(PL('                                  '));
  Centruj(PL('    (C)2004 mgr Jerzy Wa≥aszek    '));
  Centruj(PL('                                  '));
  TextAttr := $2e;
  Centruj(PL('                                  '));
  Centruj(PL('     I Liceum OgÛlnokszta≥cπce    '));
  Centruj(PL('   im. Kazimierza  BrodziÒskiego  '));
  Centruj(PL('             w Tarnowie           '));
  Centruj(PL('                                  '));
  TextAttr := $f0;
  Centruj(PL('                                  '));
  Centruj(PL('   Czy pokonasz pole pe≥ne min?   '));
  Centruj(PL('                                  '));
  TextAttr := $f4;
  Centruj(PL('        Gdy bÍdziesz gotowy,      '));
  Centruj(PL('     naciúnij dowolny klawisz     '));
  Centruj(PL('                                  '));
  TextAttr := $0e; Ramka(23,3,58,22);
  while ReadKey = #0 do; // Oczekiwanie na dowolny klawisz
  TextAttr := $07; ClrScr;
end;

// Procedura inicjuje tablice tm[]
//------------------------------------------------------
procedure UstawPoleMinowe;
var
  i,j,x,y : integer;
begin
  for i := 0 to PM_MAX_Y do
    for j := 0 to PM_MAX_X do
      pm[i,j] := ' ';
  for i := 1 to 100 do
  begin
    x := random(PM_MAX_X + 1);
    y := random(PM_MAX_Y + 1);
    pm[y,x] := '*';
  end;
  pm[PM_MAX_Y,0] := '-';
  pm[0,PM_MAX_X] := '+';
end;

// Procedura wyúwietla planszÍ gry z polem minowym.
// Widocznoúciπ min steruje parametr miny
//------------------------------------------------------
procedure Plansza(miny : boolean);
var
  i,j : integer;
begin
  for i := 0 to PM_MAX_Y do
  begin
    GotoXY(2,i+2);
    for j := 0 to PM_MAX_X do
      case pm[i,j] of
      '*' : begin // mina
              TextAttr := $20;
              if miny then write('*') else write(' ');
            end;
      ' ' : begin // puste
              TextAttr := $20; write(' ');
            end;
      '.' : begin // úlad przejúcia
              TextAttr := $a0; write(' ');
            end;
      '-' : begin // punkt startu
              TextAttr := $70; write(' ');
            end;
      '+' : begin // punkt docelowy
              TextAttr := $e0; write(' ');
            end;
      end;
  end;
end;

// Funkcja zwraca true, jeúli gracz nie ma ochoty na
// kolejnπ rozgrywkÍ.
//------------------------------------------------------
function KoniecGry : boolean;
begin
  GotoXY(1,23); TextAttr := $0f;
  Centruj('Jeszcze raz ? [T] = Tak, [Inny] = Nie');
  Result := UpCase(ReadKey) <> 'T';
end;

// Funkcja steruje ruchami gracza. Obs≥uguje naciúniÍcia
// klawiszy kursora i przemieszcza pozycjÍ gracza na nowe
// pole. Sprawdza rodzaj pola na ktÛrym znalaz≥ siÍ po
// ruchu gracz. Jeúli jest to mina lub pole docelowe,
// koÒczy grÍ z odpowiednim komunikatem. Pole gry jest
// wtedy ponownie wyúwietlane, ale z widocznymi minami.
//------------------------------------------------------
function KoncowyRuch(var x,y : integer) : boolean;
var
  c : char;
begin
  Result := false;
  GotoXY(x+2,y+2); TextAttr := $8f; write(#207);
  repeat
    c := ReadKey;
  until c <> #0;
  GotoXY(x+2,y+2); TextAttr := $8f; write(' ');
  case c of
    #75 : if x > 0 then dec(x);        //strza≥ka w lewo
    #77 : if x < PM_MAX_X then inc(x); //strza≥ka w prawo
    #72 : if y > 0 then dec(y);        //strza≥ka w gÛrÍ
    #80 : if y < PM_MAX_Y then inc(y); //strza≥ka w dÛ≥
  end;
  GotoXY(1,22);
  case pm[y,x] of
    '*' : begin
            TextAttr := $0c;
            Centruj(PL('P O L E G £ E å  N A  P O L U  M I N O W Y M'));
            Plansza(true);
            GotoXY(x+2,y+2); TextAttr := $4e; write('+');
            Result := true;
          end;
    '+' : begin
            TextAttr := $0e;
            Centruj(PL('GRATULACJE - POKONA£Eå POLE MINOWE'));
            Plansza(true);
            GotoXY(x+2,y+2); TextAttr := $e1; write(#207);
            Result := true;
          end;
    '-' : ;
    else
      pm[y,x] := '.'; // Pozostawiamy úlad przejúcia
  end;
end;

// Procedura sprawdza, czy wokÛ≥ pozycji gracza sπ miny.
// Wyúwietla odpowiedni komunikat.
//------------------------------------------------------
procedure SprawdzMiny(x,y : integer);
var
  i,j  : integer;
  mina : boolean;
begin
  GotoXY(1,23);
  mina := false;
  for i := y - 1 to y + 1 do
    for j := x - 1 to x + 1 do
    if (i >= 0) and (i <= PM_MAX_Y) and
       (j >= 0) and (j <= PM_MAX_X) and
       (pm[i,j] = '*') then mina := true;
  if mina then
  begin
    TextAttr := $ce; Centruj('  UWAGA - MINY!  ');
  end
  else
  begin
    TextAttr := $1f; Centruj('  NIE  MA  MIN   ');
  end;
end;

// G≥Ûwny blok programu.
//------------------------------------------------------
var
  a,px,py : integer;
begin
  Randomize;
  a := TextAttr; CursorOff;
  repeat
    StronaTytulowa;
    UstawPoleMinowe;
    Plansza(false);
    px := 0; py := PM_MAX_Y;
    repeat
      SprawdzMiny(px,py);
    until KoncowyRuch(px,py);
  until KoniecGry;
  TextAttr := a; CursorOn; ClrScr;
end. 